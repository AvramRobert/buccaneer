1.
TODO: Implement some type of dynamic matching of input -> command & args interpolation.
A command can have multiple variations of arguments, it should be possible that, given an input,
the most appropriate one be selected from defined n. Otherwise an error is reported

2.
TODO: The fairly localized mapping of the new error message makes it, sort of, impossible to externally define error messages, because they simply get overridden
Similar to "unnamed" and "named", add a function for the association command <-> args, without directly calling `:>>`
This could then be treated as a simple combinator that also accepts an error message

Example:
  command("add")
  .dashedArgument("A").param[Int].param[Double] withErr ("Nonono")
  .doubleDashedArgument("B") withErr ("Hello")
  .dashedArgument("A").orElse(_.doubleDashed("A")) withErr ("Nay I say")

3.
IDEA: Differentiation between argument types is sort of redundant and becomes problematic when trying to compose them (hint hint: named param)
Simplify this to some `Argument` ADT and simply let the user define what prefixes he might or might not want to have
 case class Argument(v: String) extends Symbol

   command("add")
    .argument("-A").orElse("--A").param[Int]
    .argument("-B").param[Double]


4.
TODO: Test Traverse laws for Interpolation

5.
Enhancement:
Compile time command arity check. Commands that are similar enough to pass the syntax checker and resolver should be excluded at compile time.
The `Mapper` is in itself a proof, that the input `String` is of, or can be converted to the given type. I might perhaps be able to use this
as an eager type check to further narrow down the command to be run.